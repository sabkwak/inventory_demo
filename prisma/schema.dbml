Table Brand {
  id serial [primary key]
  createdAt timestamp [default: `CURRENT_TIMESTAMP`]
  name varchar(255) [unique]
}

Table Category {
  id serial [primary key]
  createdAt timestamp [default: `CURRENT_TIMESTAMP`]
  name varchar(255) [unique]
}

Table Unit {
  id serial [primary key]
  createdAt timestamp [default: `CURRENT_TIMESTAMP`]
  name varchar(255) [unique]
}

Table Product {
  id serial [primary key]
  createdAt timestamp [default: `CURRENT_TIMESTAMP`]
  updatedAt timestamp [default: `CURRENT_TIMESTAMP`]
  product varchar(255) [not null]
  brandId integer [not null, ref: > Brand.id]
  unitId integer [ref: > Unit.id]
  categoryId integer [ref: > Category.id]
  quantity integer [default: 0, not null]
  value integer
  description varchar(255)
  Indexes {
    (product, brandId) [unique]
  }
}

Table MenuItem {
  id serial [pk]
  createdAt timestamp [default: `CURRENT_TIMESTAMP`]
  name varchar(255) [not null]
  sellPrice integer [not null]
  description varchar(255)
}
Table MenuItemProduct {
  menuItemId integer [not null, ref: > MenuItem.id]
  productId integer [not null, ref: > Product.id]
  quantity integer [not null]
  Indexes {
    (menuItemId, productId) [pk]
  }
}
Table Transaction {
  id serial [primary key]
  createdAt timestamp [default: `CURRENT_TIMESTAMP`]
  updatedAt timestamp [default: `CURRENT_TIMESTAMP`]
  amount float [not null]
  description varchar(255)
  date timestamp [not null]
  type varchar(255) [default: 'subtract', not null]
  productId integer [not null, ref: > Product.id]
  price integer
}

Table MonthHistory {
  day integer [not null]
  month integer [not null]
  year integer [not null]
  subtract float [not null]
  add float [not null]
  Indexes {
    (day, month, year) [pk]
  }
}

Table YearHistory {
  month integer [not null]
  year integer [not null]
  subtract float [not null]
  add float [not null]
  Indexes {
    (month, year) [pk]
  }
}

// schema.prisma
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")

// }

// model UserSettings {
//   userId   String @id
//   DefaultUnit     String @default("g")
//   weight String @default("g")
//     email        String?
//   phone        String?
// }


// model Category {
//  id        Int       @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   name      String    @unique
//   products  Product[] 
// }

// model Unit {
//    id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   name      String    @unique
//   products  Product[] 

// }
// model Brand {
//    id        Int       @id @default(autoincrement())
//   createdAt DateTime  @default(now())
//   name      String    @unique
//   products  Product[] 

// }


// model Product {
//   id          Int       @id @default(autoincrement())
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   product     String    
//   brandId    Int
//   brand      Brand    @relation(fields: [brandId], references: [id])
//    unitId    Int?
//   unit      Unit?    @relation(fields: [unitId], references: [id])
//   categoryId  Int?
//   category    Category?  @relation(fields: [categoryId], references: [id])
//   transactions Transaction[]  // No @relation attribute needed here
//   quantity    Int       @default(0)
//   value    Int?       
//   description String?

//   @@unique([product, brandId])  // Enforce unique combination of product, brand, and category
// }

// model Transaction {
//   id          Int      @id @default(autoincrement())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   amount      Float
//   description String?
//   date        DateTime
//   type        String   @default("subtract")
//   product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   productId   Int
//    price    Int?     

// }


// model MonthHistory {
//   day     Int
//   month   Int
//   year    Int
//   subtract  Float
//   add Float

//   @@id([day, month, year])
// }

// model YearHistory {
//   month   Int
//   year    Int
//   subtract  Float
//   add Float

//   @@id([month, year])
// }
