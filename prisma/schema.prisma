// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model UserSettings {
  userId   String @id
  DefaultUnit     String @default("g")
  weight String @default("g")
    email        String?
  phone        String?
}


model Category {
 id        Int       @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String    @unique
  products  Product[] 
}

model Unit {
   id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String    @unique
  products  Product[] 

}
model Brand {
   id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String    @unique
  products  Product[] 

}


model Product {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     String    
  brandId    Int
  brand      Brand    @relation(fields: [brandId], references: [id])
   unitId    Int?
  unit      Unit?    @relation(fields: [unitId], references: [id])
  categoryId  Int?
  category    Category?  @relation(fields: [categoryId], references: [id])
  transactions Transaction[]  // No @relation attribute needed here
  quantity    Int       @default(0)
  value    Int?       
  description String?

  @@unique([product, brandId])  // Enforce unique combination of product, brand, and category
}

model Transaction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  amount      Float
  description String?
  date        DateTime
  type        String   @default("subtract")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
   price    Int?     

}


model MonthHistory {
  day     Int
  month   Int
  year    Int
  subtract  Float
  add Float

  @@id([day, month, year])
}

model YearHistory {
  month   Int
  year    Int
  subtract  Float
  add Float

  @@id([month, year])
}
